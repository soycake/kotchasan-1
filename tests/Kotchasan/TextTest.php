<?php

namespace Kotchasan;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-06-20 at 11:55:44.
 */
class TextTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * @var Text
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp()
	{
		$this->object = new Text();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{

	}

	/**
	 * Generated from @assert ("SELECT * FROM table WHERE id=:id AND lang IN (:lang, '')", array(':id' => 1, array(':lang' => 'th'))) [==] "SELECT * FROM table WHERE id=1 AND lang IN (th, '')".
	 *
	 * @covers Kotchasan\Text::replace
	 */
	public function testReplace()
	{

		$this->assertEquals(
			"SELECT * FROM table WHERE id=1 AND lang IN (th, '')", \Kotchasan\Text::replace("SELECT * FROM table WHERE id=:id AND lang IN (:lang, '')", array(':id' => 1, array(':lang' => 'th')))
		);
	}

	/**
	 * Generated from @assert ('&"'."'<>{}&amp;&#38;") [==] "&amp;&quot;&#039;&lt;&gt;&#x007B;&#x007D;&amp;&#38;".
	 *
	 * @covers Kotchasan\Text::toEditor
	 */
	public function testToEditor()
	{

		$this->assertEquals(
			"&amp;&quot;&#039;&lt;&gt;&#x007B;&#x007D;&amp;&#38;", \Kotchasan\Text::toEditor('&"'."'<>{}&amp;&#38;")
		);
	}

	/**
	 * Generated from @assert (" \tทดสอบ\r\nภาษาไทย") [==] 'ทดสอบ ภาษาไทย'.
	 *
	 * @covers Kotchasan\Text::oneLine
	 */
	public function testOneLine()
	{

		$this->assertEquals(
			'ทดสอบ ภาษาไทย', \Kotchasan\Text::oneLine(" \tทดสอบ\r\nภาษาไทย")
		);
	}

	/**
	 * Generated from @assert ('สวัสดี ประเทศไทย', 8) [==] 'สวัสดี..'.
	 *
	 * @covers Kotchasan\Text::cut
	 */
	public function testCut()
	{

		$this->assertEquals(
			'สวัสดี..', \Kotchasan\Text::cut('สวัสดี ประเทศไทย', 8)
		);
	}

	/**
	 * Generated from @assert ('123456789', 8) [==] '123456..'.
	 *
	 * @covers Kotchasan\Text::cut
	 */
	public function testCut2()
	{

		$this->assertEquals(
			'123456..', \Kotchasan\Text::cut('123456789', 8)
		);
	}

	/**
	 * Generated from @assert (256) [==] '256 Bytes'.
	 *
	 * @covers Kotchasan\Text::formatFileSize
	 */
	public function testFormatFileSize()
	{

		$this->assertEquals(
			'256 Bytes', \Kotchasan\Text::formatFileSize(256)
		);
	}

	/**
	 * Generated from @assert (1024) [==] '1 KB'.
	 *
	 * @covers Kotchasan\Text::formatFileSize
	 */
	public function testFormatFileSize2()
	{

		$this->assertEquals(
			'1 KB', \Kotchasan\Text::formatFileSize(1024)
		);
	}

	/**
	 * Generated from @assert (1024 * 1024) [==] '1 MB'.
	 *
	 * @covers Kotchasan\Text::formatFileSize
	 */
	public function testFormatFileSize3()
	{

		$this->assertEquals(
			'1 MB', \Kotchasan\Text::formatFileSize(1024 * 1024)
		);
	}

	/**
	 * Generated from @assert (1024 * 1024 * 1024) [==] '1 GB'.
	 *
	 * @covers Kotchasan\Text::formatFileSize
	 */
	public function testFormatFileSize4()
	{

		$this->assertEquals(
			'1 GB', \Kotchasan\Text::formatFileSize(1024 * 1024 * 1024)
		);
	}

	/**
	 * Generated from @assert (1024 * 1024 * 1024 * 1024) [==] '1 TB'.
	 *
	 * @covers Kotchasan\Text::formatFileSize
	 */
	public function testFormatFileSize5()
	{

		$this->assertEquals(
			'1 TB', \Kotchasan\Text::formatFileSize(1024 * 1024 * 1024 * 1024)
		);
	}

	/**
	 * Generated from @assert (' ad_min@demo.com') [==] 'ad_min@demo.com'.
	 *
	 * @covers Kotchasan\Text::username
	 */
	public function testUsername()
	{

		$this->assertEquals(
			'ad_min@demo.com', \Kotchasan\Text::username(' ad_min@demo.com')
		);
	}

	/**
	 * Generated from @assert ('012 3465') [==] '0123465'.
	 *
	 * @covers Kotchasan\Text::username
	 */
	public function testUsername2()
	{

		$this->assertEquals(
			'0123465', \Kotchasan\Text::username('012 3465')
		);
	}

	/**
	 * @covers Kotchasan\Text::rndname
	 * @todo   Implement testRndname().
	 */
	public function testRndname()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Kotchasan\Text::highlighter
	 * @todo   Implement testHighlighter().
	 */
	public function testHighlighter()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
			'This test has not been implemented yet.'
		);
	}
}